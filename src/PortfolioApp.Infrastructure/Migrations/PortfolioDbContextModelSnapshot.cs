// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioApp.Infrastructure.Data;

#nullable disable

namespace PortfolioApp.Infrastructure.Migrations
{
    [DbContext(typeof(PortfolioDbContext))]
    partial class PortfolioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("PortfolioApp.Domain.Entities.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Unique identifier for the contact message");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the message has been read by an administrator");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT")
                        .HasComment("The actual message content from the sender");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("TEXT")
                        .HasComment("Email address of the sender");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Name of the person sending the message");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the message was sent/received");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Subject line of the message");

                    b.HasKey("Id");

                    b.HasIndex("IsRead")
                        .HasDatabaseName("IX_ContactMessages_IsRead");

                    b.HasIndex("SenderEmail")
                        .HasDatabaseName("IX_ContactMessages_SenderEmail");

                    b.HasIndex("SenderName")
                        .HasDatabaseName("IX_ContactMessages_SenderName");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_ContactMessages_SentAt");

                    b.HasIndex("Subject")
                        .HasDatabaseName("IX_ContactMessages_Subject");

                    b.HasIndex("IsRead", "SentAt")
                        .HasDatabaseName("IX_ContactMessages_Urgent")
                        .HasFilter("IsRead = 0");

                    b.HasIndex("SenderEmail", "SentAt")
                        .HasDatabaseName("IX_ContactMessages_SenderEmail_SentAt");

                    b.ToTable("ContactMessages", null, t =>
                        {
                            t.HasCheckConstraint("CK_ContactMessages_Message_Length", "LENGTH(TRIM(Message)) >= 10");

                            t.HasCheckConstraint("CK_ContactMessages_Message_NotEmpty", "LENGTH(TRIM(Message)) > 0");

                            t.HasCheckConstraint("CK_ContactMessages_SenderEmail_Format", "SenderEmail LIKE '%@%.%' AND LENGTH(SenderEmail) > 5");

                            t.HasCheckConstraint("CK_ContactMessages_SenderEmail_NotTest", "SenderEmail NOT LIKE '%test@test%' AND SenderEmail NOT LIKE '%example.com%'");

                            t.HasCheckConstraint("CK_ContactMessages_SenderName_Length", "LENGTH(TRIM(SenderName)) >= 2");

                            t.HasCheckConstraint("CK_ContactMessages_SenderName_NotEmpty", "LENGTH(TRIM(SenderName)) > 0");

                            t.HasCheckConstraint("CK_ContactMessages_SentAt_Valid", "SentAt <= datetime('now')");

                            t.HasCheckConstraint("CK_ContactMessages_Subject_Length", "LENGTH(TRIM(Subject)) >= 3");

                            t.HasCheckConstraint("CK_ContactMessages_Subject_NotEmpty", "LENGTH(TRIM(Subject)) > 0");
                        });
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Unique identifier for the image");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Alternative text for accessibility (screen readers)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Detailed description of the image content");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER")
                        .HasComment("Image height in pixels");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasComment("Foreign key reference to the project this image belongs to");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("INTEGER")
                        .HasComment("File size in bytes");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Display title for the image");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the image was uploaded");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Relative URL path to the image file from wwwroot");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER")
                        .HasComment("Image width in pixels");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Images_ProjectId");

                    b.HasIndex("SizeInBytes")
                        .HasDatabaseName("IX_Images_SizeInBytes");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Images_Title");

                    b.HasIndex("UploadedAt")
                        .HasDatabaseName("IX_Images_UploadedAt");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("IX_Images_Url_Unique");

                    b.HasIndex("ProjectId", "UploadedAt")
                        .HasDatabaseName("IX_Images_ProjectId_UploadedAt");

                    b.HasIndex("Width", "Height")
                        .HasDatabaseName("IX_Images_Dimensions");

                    b.ToTable("Images", null, t =>
                        {
                            t.HasCheckConstraint("CK_Images_Height_Positive", "Height > 0");

                            t.HasCheckConstraint("CK_Images_Height_Reasonable", "Height <= 10000");

                            t.HasCheckConstraint("CK_Images_ProjectId_Positive", "ProjectId > 0");

                            t.HasCheckConstraint("CK_Images_SizeInBytes_Positive", "SizeInBytes > 0");

                            t.HasCheckConstraint("CK_Images_SizeInBytes_Reasonable", "SizeInBytes <= 52428800");

                            t.HasCheckConstraint("CK_Images_Title_NotEmpty", "LENGTH(TRIM(Title)) > 0");

                            t.HasCheckConstraint("CK_Images_UploadedAt_Valid", "UploadedAt <= datetime('now')");

                            t.HasCheckConstraint("CK_Images_Url_Format", "Url LIKE '/%' OR Url LIKE 'http%://%'");

                            t.HasCheckConstraint("CK_Images_Url_NotEmpty", "LENGTH(TRIM(Url)) > 0");

                            t.HasCheckConstraint("CK_Images_Width_Positive", "Width > 0");

                            t.HasCheckConstraint("CK_Images_Width_Reasonable", "Width <= 10000");
                        });
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Unique identifier for the project");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the project record was created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT")
                        .HasComment("Detailed project description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT")
                        .HasComment("Project end date (null for ongoing projects)");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if project should be featured prominently");

                    b.Property<string>("ProjectUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("URL to the live project or repository");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT")
                        .HasComment("Project start date");

                    b.Property<string>("TechnologiesUsed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Comma-separated list of technologies used");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Project title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the project record was last updated");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasComment("Foreign key reference to the user who owns this project");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Projects_CreatedAt");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_Projects_EndDate");

                    b.HasIndex("IsFeatured")
                        .HasDatabaseName("IX_Projects_IsFeatured");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_Projects_StartDate");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Projects_Title");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Projects_UserId");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_Projects_DateRange");

                    b.HasIndex("UserId", "IsFeatured")
                        .HasDatabaseName("IX_Projects_UserId_IsFeatured");

                    b.HasIndex("UserId", "Title")
                        .IsUnique()
                        .HasDatabaseName("IX_Projects_UserId_Title_Unique");

                    b.ToTable("Projects", null, t =>
                        {
                            t.HasCheckConstraint("CK_Projects_CreatedAt_Valid", "CreatedAt <= datetime('now')");

                            t.HasCheckConstraint("CK_Projects_DateRange_Valid", "EndDate IS NULL OR StartDate IS NULL OR EndDate >= StartDate");

                            t.HasCheckConstraint("CK_Projects_Description_NotEmpty", "LENGTH(TRIM(Description)) > 0");

                            t.HasCheckConstraint("CK_Projects_ProjectUrl_Format", "ProjectUrl IS NULL OR ProjectUrl LIKE 'http%://%'");

                            t.HasCheckConstraint("CK_Projects_Title_NotEmpty", "LENGTH(TRIM(Title)) > 0");

                            t.HasCheckConstraint("CK_Projects_UpdatedAt_Valid", "UpdatedAt >= CreatedAt");

                            t.HasCheckConstraint("CK_Projects_UserId_Positive", "UserId > 0");
                        });
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Unique identifier for the user");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("User's professional biography");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the user record was created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("TEXT")
                        .HasComment("User's email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("User's last name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("User's phone number");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Relative URL to user's profile picture");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Relative URL to user's resume file");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the user record was last updated");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_Users_CreatedAt_Valid", "CreatedAt <= datetime('now')");

                            t.HasCheckConstraint("CK_Users_Email_Format", "Email LIKE '%@%.%' AND LENGTH(Email) > 5");

                            t.HasCheckConstraint("CK_Users_FirstName_NotEmpty", "LENGTH(TRIM(FirstName)) > 0");

                            t.HasCheckConstraint("CK_Users_LastName_NotEmpty", "LENGTH(TRIM(LastName)) > 0");

                            t.HasCheckConstraint("CK_Users_PhoneNumber_Format", "PhoneNumber IS NULL OR LENGTH(TRIM(PhoneNumber)) >= 10");

                            t.HasCheckConstraint("CK_Users_UpdatedAt_Valid", "UpdatedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Unique identifier for the video");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("")
                        .HasComment("Detailed description of the video content");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("INTEGER")
                        .HasComment("Video duration in seconds");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasComment("Foreign key reference to the project this video belongs to");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("INTEGER")
                        .HasComment("File size in bytes");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Relative URL path to the video thumbnail image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Display title for the video");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("Timestamp when the video was uploaded");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Relative URL path to the video file from wwwroot");

                    b.HasKey("Id");

                    b.HasIndex("DurationInSeconds")
                        .HasDatabaseName("IX_Videos_DurationInSeconds");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Videos_ProjectId");

                    b.HasIndex("SizeInBytes")
                        .HasDatabaseName("IX_Videos_SizeInBytes");

                    b.HasIndex("ThumbnailUrl")
                        .HasDatabaseName("IX_Videos_ThumbnailUrl");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Videos_Title");

                    b.HasIndex("UploadedAt")
                        .HasDatabaseName("IX_Videos_UploadedAt");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("IX_Videos_Url_Unique");

                    b.HasIndex("ProjectId", "UploadedAt")
                        .HasDatabaseName("IX_Videos_ProjectId_UploadedAt");

                    b.ToTable("Videos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Videos_DurationInSeconds_NonNegative", "DurationInSeconds >= 0");

                            t.HasCheckConstraint("CK_Videos_DurationInSeconds_Reasonable", "DurationInSeconds <= 14400");

                            t.HasCheckConstraint("CK_Videos_ProjectId_Positive", "ProjectId > 0");

                            t.HasCheckConstraint("CK_Videos_SizeInBytes_Positive", "SizeInBytes > 0");

                            t.HasCheckConstraint("CK_Videos_SizeInBytes_Reasonable", "SizeInBytes <= 2147483648");

                            t.HasCheckConstraint("CK_Videos_ThumbnailUrl_Format", "ThumbnailUrl IS NULL OR ThumbnailUrl LIKE '/%' OR ThumbnailUrl LIKE 'http%://%'");

                            t.HasCheckConstraint("CK_Videos_Title_NotEmpty", "LENGTH(TRIM(Title)) > 0");

                            t.HasCheckConstraint("CK_Videos_UploadedAt_Valid", "UploadedAt <= datetime('now')");

                            t.HasCheckConstraint("CK_Videos_Url_Format", "Url LIKE '/%' OR Url LIKE 'http%://%'");

                            t.HasCheckConstraint("CK_Videos_Url_NotEmpty", "LENGTH(TRIM(Url)) > 0");
                        });
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Image", b =>
                {
                    b.HasOne("PortfolioApp.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Images_Projects_ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Project", b =>
                {
                    b.HasOne("PortfolioApp.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Video", b =>
                {
                    b.HasOne("PortfolioApp.Domain.Entities.Project", "Project")
                        .WithMany("Videos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Videos_Projects_ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
